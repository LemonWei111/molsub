#!/bin/bash

LOG_DIR="logging"
mkdir -p "$LOG_DIR"
LOGFILE="$LOG_DIR/train_$(date +%Y%m%d_%H%M%S).log"

echo "=== Training Script Started ===" > "$LOGFILE"
echo "Command: $0 $*" >> "$LOGFILE"
echo "Start Time: $(date '+%Y-%m-%d %H:%M:%S')" >> "$LOGFILE"
echo "================================" >> "$LOGFILE"
echo "" >> "$LOGFILE"

LABEL="ms"
BOUND_SIZE=100
CLIP_LIMIT=0.003
IMG_SIZE=224
INPUT_CHANNEL=1
COMBINE_DATA=0
MASK=0
OVERSAMPLE_RATIO=0.0
DOWNSAMPLE_RATIO=0.0
BASE_SAMPLING=""
GAN_DIR=""

MODEL_TYPE="densenet121-cbam"
PRETRAIN=1
DROPOUT=0.3
FEATURE=0

LOSS_TYPE="ce"

LR=0.0001
DECAY=0.005
MOMENTUM=0.9
CONFIDENCE_THRESHOLD=0.0

TRAIN_MODE=8
K=5
BATCH_SIZE=8
NUM_WORKERS=2
NUM_EPOCHS=300
SAVE_EPOCH=10
TRAIN_DIFF=0.0
TRAIN_DIFF_EPOCHS=30
EARLY_STOPPING_PATIENCE=100

SEED=21
TRAIN_DEBUG=0

show_help() {
    cat << 'EOF'
Usage: ./train.sh [OPTIONS]

Parameter description of training script:

 -l, --label  VALUE                Classification task types: ms, l, tn, HER2 (default: ms)
 -b, --bound-size  N               Tumor boundary expansion size (consistent with preprocessed data, default: 100)
 -c, --clip-limit  VALUE           CLAHE contrast limit (consistent with preprocessed data, default: 0.003)
 -i, --img-size  N                 Input image size (matches model input, default: 224)
 -C, --input-channel  N            Number of input channels (1=grayscale image) (default: 1)
 -d, --combine-data  0|1           Whether to use dual channels (consistent with preprocessed data, default: 0)
 -m, --mask  0|1                   Whether to use mask enhancement (default: 0)
 -O, --oversample-ratio  V         Oversampling ratio (Luminal/Non-Luminal: 1.3, TN/Non-TN: 1.7, others: 1.5)
 -D, --downsample-ratio  V         Undersampling ratio (default: 0.0)
 -B, --base-sampling  STR          Basic sampling strategy (default: empty)
 -G, --gan-dir  PATH               Directory of images generated by GAN (optional)
 -M, --model-type  NAME            Model type (default: densenet121 cbam, optional: densenet121-cbam, mob-cbam, cnn, resnet18, resnet101, densenet121, mobilevit, mil, etc.)
 -P, --pretrain  0|1               Whether to use pretrained weights (1=Yes, 0=No) (default: 1)
 -r, --dropout  VALUE              Dropout ratio (default: 0.3)
 -f, --feature  0|1                Whether to use SIFT features (default: 0)
 -p, --patch-size  STR             MIL patch size, such as "(16,16)" (default: None)
 -L, --loss-type  NAME             Loss function type (default: ce, optional: ce, focal, mwnl, sf1, ce+sf1, bce, etc.)
 -R, --lr  VALUE                   Initial learning rate (default: 0.0001)
 -e, --decay  VALUE                Weight decay (default: 0.005)
 -o, --momentum  VALUE             SGD momentum (default: 0.9)
 -T, --confidence-threshold  V     Confidence threshold for training of difficult classifications (default: 0.0)
 -t, --train-mode  N               Training mode (default: 8)
 -k, --k  N                        Cross validation folds (default: 5)
 -s, --batch-size  N               Batch size (default: 8)
 -w, --num-workers  N              Number of data loading threads (default: 2)
 -E, --num-epochs  N               Total epochs (default: 300)
 -S, --save-epoch  N               Save every N epochs (default: 10)
 -a, --train-diff  0|1             Whether to conduct training of difficult classifications (default: 0)
 -F, --train-diff-epochs  N        Epochs of training of difficult classifications (default: 30)
 -N, --early-stopping-patience  N  Early stop patience (default: 100)
 -I, --seed  N                     Random seeds to ensure reproducibility (default: 21)
 -x, --train-debug  0|1            Debugging mode (1=enabled) (default: 0)

 -h, --help                        Display this help information

Example:
 ./train.sh -l tn -i 256 -M resnet18 -s 16
EOF
}

while getopts "l:b:c:i:C:d:m:O:D:B:G:M:P:r:f:L:R:e:o:T:t:k:s:w:E:S:a:F:N:I:x:h" opt; do
    case $opt in
        l) LABEL="$OPTARG" ;;
        b) BOUND_SIZE="$OPTARG" ;;
        c) CLIP_LIMIT="$OPTARG" ;;
        i) IMG_SIZE="$OPTARG" ;;
        C) INPUT_CHANNEL="$OPTARG" ;;
        d) COMBINE_DATA="$OPTARG" ;;
        m) MASK="$OPTARG" ;;
        O) OVERSAMPLE_RATIO="$OPTARG" ;;
        D) DOWNSAMPLE_RATIO="$OPTARG" ;;
        B) BASE_SAMPLING="$OPTARG" ;;
        G) GAN_DIR="$OPTARG" ;;
        M) MODEL_TYPE="$OPTARG" ;;
        P) PRETRAIN="$OPTARG" ;;
        r) DROPOUT="$OPTARG" ;;
        f) FEATURE="$OPTARG" ;;
        L) LOSS_TYPE="$OPTARG" ;;
        R) LR="$OPTARG" ;;
        e) DECAY="$OPTARG" ;;
        o) MOMENTUM="$OPTARG" ;;
        T) CONFIDENCE_THRESHOLD="$OPTARG" ;;
        t) TRAIN_MODE="$OPTARG" ;;
        k) K="$OPTARG" ;;
        s) BATCH_SIZE="$OPTARG" ;;
        w) NUM_WORKERS="$OPTARG" ;;
        E) NUM_EPOCHS="$OPTARG" ;;
        S) SAVE_EPOCH="$OPTARG" ;;
        a) TRAIN_DIFF="$OPTARG" ;;
        F) TRAIN_DIFF_EPOCHS="$OPTARG" ;;
        N) EARLY_STOPPING_PATIENCE="$OPTARG" ;;
        I) SEED="$OPTARG" ;;
        x) TRAIN_DEBUG="$OPTARG" ;;
        h) show_help; exit 0 ;;
        ?) echo "Invalid Option: -$OPTARG" >&2; show_help; exit 1 ;;
    esac
done

shift $((OPTIND-1))

if [ -z "${OVERSAMPLE_RATIO}" ] || [ "$OVERSAMPLE_RATIO" = "0.0" ]; then
    case "$LABEL" in
        "tn"|"TN")
            OVERSAMPLE_RATIO=1.7
            ;;
        "l"|"L"|"luminal")
            OVERSAMPLE_RATIO=1.3
            ;;
        *)
            OVERSAMPLE_RATIO=1.5
            ;;
    esac
    
    echo "📊 Automatically set OVERSAMPLE-RATIO=$OVERSAMPLE_RATIO according to LABEL='$LABEL'"
else
    echo "📌 Using manually set OVERSAMPLE_RATIO=$OVERSAMPLE_RATIO"
fi

echo "Training log is saved at: $LOGFILE"
echo "🚀 Start training the model..."
python train.py \
    --bound_size $BOUND_SIZE \
    --clip_limit $CLIP_LIMIT \
    --label "$LABEL" \
    \
    --train_mode $TRAIN_MODE \
    --k $K \
    --batch_size $BATCH_SIZE \
    --num_workers $NUM_WORKERS \
    --num_epochs $NUM_EPOCHS \
    --save_epoch $SAVE_EPOCH \
    --train_diff_epochs $TRAIN_DIFF_EPOCHS \
    --lr $LR \
    --decay $DECAY \
    --momentum $MOMENTUM \
    --pretrain $PRETRAIN \
    --dropout $DROPOUT \
    --model_type $MODEL_TYPE \
    --feature $FEATURE \
    --input_channel $INPUT_CHANNEL \
    --loss_type $LOSS_TYPE \
    --train_diff $TRAIN_DIFF \
    --confidence_threshold $CONFIDENCE_THRESHOLD \
    --early_stopping_patience $EARLY_STOPPING_PATIENCE \
    \
    --img_size $IMG_SIZE \
    \
    --pretrained_dir "$PRETRAINED_DIR" \
    --seed $SEED \
    \
    --oversample_ratio $OVERSAMPLE_RATIO \
    --downsample_ratio $DOWNSAMPLE_RATIO \
    --base_sampling "$BASE_SAMPLING" \
    --gan_dir "$GAN_DIR" \
    \
    --combine_data $COMBINE_DATA \
    --mask $MASK \
    --train_debug $TRAIN_DEBUG \
    >> "$LOGFILE" 2>&1

if [ $? -eq 0 ]; then
    echo "" >> "$LOGFILE"
    echo "✅ Training completed successfully."
    echo "✅ Training completed successfully." >> "$LOGFILE"
else
    echo "" >> "$LOGFILE"
    echo "❌ Training failed with exit code $?"
    echo "❌ Training failed with exit code $?" >> "$LOGFILE"
fi

echo "End Time: $(date '+%Y-%m-%d %H:%M:%S')" >> "$LOGFILE"
